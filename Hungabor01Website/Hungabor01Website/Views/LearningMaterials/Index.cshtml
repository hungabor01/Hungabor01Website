@{
    ViewData["Title"] = "LearningMaterials";
}

@section Styles {
    <environment include="Development">
        <link href="~/css/materials.css" rel="stylesheet" />
    </environment>
    <environment exclude="Development">
        <link href="~/css/materials.min.css" rel="stylesheet" />
    </environment>
}

<div>
    <h1>
        Learning Materials
    </h1>
    <p>
        I have never studied directly programming neither in university or in a class. Even though I went to two different universities in two different fields and had classes for programming, 
        I had to learn programming by myself. In our modern world, this is not a big problem, since the internet is full of learning sources, with good and unfortunately bad ones as well. 
        Also their prices can differ in a wide range. So it can be a little bit overwhelming and time consuming task to pick the right tutorials. In my learning journey, I had to experience this fact. 
        Therefore, looking back to this path, I have collected the learning sources I have encountered with. I also tried to structure these materials into a big tutorial, 
        which I would follow if I were starting to learn coding now. I am not sure anybody will use or read them ever, but I consider this useful for myself as well. These materials also summarize my 
        skills in the field.
    </p>
    <p>
        The learning materials target the knowledge of a backend focused (or desktop) full stack .Net developer, but can be applied to other OOP languages in general, like java for example, except the coding part obviously.
        To understand the difference between frontend, backend and full stack, watch this video.
        <br />
        <iframe src="https://www.youtube.com/embed/pkdgVYehiTE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
        <br />
        There are free and paid resources in this tutorial, but it is totally up to you, which one you use. You can take the full free path, you wont miss anything.
        However, the paid courses are usually designed full tutorials, so they are more deep and cover more stuff. The paid resources mean Udemy or Pluralsight courses. 
        On Pluralsight, you pay a monthly fee (around 30 euro) and you can watch everything without limitations. There is also a free month for new subscribers, 
        so if you want to spare money, watch as many courses as you can in the shortest period of time. On Udemy, you pay for every course you watch. There are discounts frequently, 
        so you should never buy a course more than 20 dollars.
    </p>
    <p>
        First, let's see a summary over what it needs for somebody to become a software developer. 
        I have excluded most of the mental skills from this overview, like logic, abstract thinking and other frequently heard terms, simply because I could not add any useful tips to them. 
        However, these can be also key factors, so it is worth checking the internet for them, but I don't think they should be overestimated. 
    </p>
</div>

<div>
    <h1>
        The big picture
    </h1>
</div>

<div class="row">
    <div class="col-xs-12">
        <ul class="list-inline tiles">
            <li>
                <a asp-action="Coding" asp-controller="LearningMaterials">
                    <div class="tile">
                        <h2>Coding</h2>
                        <ul>
                            <li>language basics</li>
                            <li>advanced language</li>
                            <li>common libraries</li>
                            <li>project types</li>
                        </ul>
                    </div>
                </a>
            </li>
            <li>
                <a asp-action="Programming" asp-controller="LearningMaterials">
                    <div class="tile">
                        <h2>Programming</h2>
                        <ul>
                            <li>algorithms, data structures</li>
                            <li>best practices</li>
                            <li>using an IDE</li>
                        </ul>
                    </div>
                </a>
            </li>
            <li>
                <a asp-action="Design" asp-controller="LearningMaterials">
                    <div class="tile">
                        <h2>Design</h2>
                        <ul>
                            <li>SOLID</li>
                            <li>design patterns</li>
                            <li>dependency injection</li>
                            <li>project architectures</li>
                        </ul>
                    </div>
                </a>
            </li>
            <li>
                <a asp-action="Web" asp-controller="LearningMaterials">
                    <div class="tile">
                        <h2>Web</h2>
                        <ul>
                            <li>html</li>
                            <li>css</li>
                            <li>javascript</li>
                            <li>frontend frameworks</li>
                            <li>networking</li>
                        </ul>
                    </div>
                </a>
            </li>
            <li>
                <a asp-action="Sql" asp-controller="LearningMaterials">
                    <div class="tile">
                        <h2>SQL</h2>
                        <ul>
                            <li>basic queries</li>
                            <li>advanced queires</li>
                            <li>database design</li>
                            <li>advanced database</li>
                            <li>analyzing, maintenance</li>
                        </ul>
                    </div>
                </a>
            </li>
            <li>
                <a asp-action="SoftSkills" asp-controller="LearningMaterials">
                    <div class="tile">
                        <h2>Soft skills</h2>
                        <ul>
                            <li>english</li>
                            <li>problem solving</li>
                            <li>version control</li>
                            <li>corporate communication</li>
                            <li>methodologies</li>
                        </ul>
                    </div>
                </a>
            </li>
            <li>
                <a asp-action="Other" asp-controller="LearningMaterials">
                    <div class="tile">
                        <h2>Other</h2>
                        <ul>
                            <li>Azure</li>
                            <li>Docker, Kubernetes</li>
                            <li>Excel, Word, Notepad++</li>
                            <li>xml, json</li>
                            <li>OS</li>
                            <li>cmd, PowerShell</li>
                        </ul>
                    </div>
                </a>
            </li>
        </ul>
    </div>
</div>

<div>
    <h5><a asp-action="Coding" asp-controller="LearningMaterials">Coding</a></h5>
    <p>
        The first category is the coding, which should not be a surprise, since eventually the developer writes code.
        I think, it is highly advised to know at least one object oriented programming language and this section fulfills this need.
        After somebody determined which programming language to learn, the basics of this language should be studied first.
        This means getting familiar with the syntax, with the structure of the language, also learning the variable types, control statements and the OOP related components.
        It is important to have a solid knowledge here to be able to learn the advanced stuffs. Therefore, practice is necessary.
        The next is the advanced part of the language. 
        In C#, this covers for example asynchronous programming and delegates, beside many other things of course.
        Along learning the language, a few commonly used libraries are introduced, but these deserve a separate section here. 
        For instance, I/O operations, database management (Entity Framework) or unit testing. When the syntax and the structure of the language can be no longer a problem, 
        it is time to learn how to use this knowledge in real projects, like desktop console, desktop UI applications, mobile development or an ASP.Net website.
    </p>
    <h5><a asp-action="Programming" asp-controller="LearningMaterials">Programming</a></h5>
    <p>
        The next category is related to the previous one and hard to separate them. I call it just programming, but this really means how to tackle problems with code. 
        This section forms the someone's thinking to a developer's thinking. So the frequently used algorithms, data structures are listed here for example. 
        Beside this, two often overlooked skills belong to here. 
        A good developer is aware of the best practices of the language, in order to create high quality, easily maintainable code. This can separate a good programmer from a bad one. 
        The other is a smaller topic. For time efficiency, deeply knowing the used IDE is a big advantage and makes the programmer's life a lot easier.
    </p>
    <h5><a asp-action="Design" asp-controller="LearningMaterials">Design</a></h5>
    <p>
        The software design is an advanced, but very important and interesting topic. Creativity and knowledge meets here. SOLID is an acronym, covers the basic principles in creating quality software. 
        These principles apply to any OOP language and they are a must for everybody. Moving on to the actual design patterns from the basics, they are introduced based on the Gang of Four book, 
        which is kinda the Bible of the design patterns. The patterns are grouped to creational, behavioral and structural ones. To fully understand them, it takes lots of practices, 
        but to be able to recognize them or their needs, one must know them deeply. I moved the dependency injection to a separate section, because it is a very important and widely used technique. 
        Lastly, we can understand some architectural pattern, like MVC or MVVM.
    </p>
    <h5><a asp-action="Web" asp-controller="LearningMaterials">Web</a></h5>
    <p>
        Most applications, softwares have a server-client architecture. This is true for the web apps as well. In some cases, there are separate teams or people for doing the backend and frontend 
        jobs, but not always and our world goes to the direction of the full-stack developers, who can do both job. Therefore, being familiar with the frontend techniques is getting more and more 
        important for a backend developer as well. This means the basic three components of the web, html, css and javascript. Almost all of the frontend frameworks are based on these. However, 
        I would recommend to learn one specific framework as well, for instance Angular, React or Vue.js. Beside the programming part, it is essential to understand at least the basics of 
        how the network communication and different protocols work.
    </p>
    <h5><a asp-action="Sql" asp-controller="LearningMaterials">Sql</a></h5>
    <p>
        Almost all applications need a persistance layer, which can persist data for long time, even when the app is not running. For this, we are using databases. There are lots of different kind of
        databases, but the most common is Sql. A software developer usually just writes queries against the database, because there is a database expert, who handles most of the database related stuffs.
        So the most important thing is in this section, to be able to write any kind of query with ease. A separate topic is creating, designing the database, which is useful and often used
        by developers as well. These are the must for a developer and a deep knowledge in these can benefit well, in work and in job interviews as well. Advanced database is intended
        to deal with all theoretical topics like indexes, and all other practical topics like stored procedures, transactions or views. This section has also very important materials, so even for a junior 
        developer, it can be useful. Last section is analyzing queries and maintaining the performance of the database. Here for example, it is worth to learn the Sql Profiler tool or 
        how the execution plan works.
    </p>
    <h5><a asp-action="SoftSkills" asp-controller="LearningMaterials">Soft skills</a></h5>
    <p>
        The soft skills are also very essential for a developer, since we work in teams, with other people and this team must be organized. The most important skill here, is the english language,
        but if you are reading this, you won't have any problems with it probably. Nowadays the teams are international, so english is the language for communication, but also all trainings,
        tutorials or documentations are written in english. Therefore, basic english is the first thing to learn for anybody starting to develop programs.
        In the beginning, I said, there won't be mental skills listed here, but there is one really important, which I will mention here. It is hard to title it with a word, but it is
        kinda problem solving on your own. During coding or planning, usually there are obstacles, in this case finding the solution on the internet is key.
        To preserve and share the code, version control systems are used.
        The most common one is the Git, which is a free and simple source control system. It also can be useful in personal projects.
        Also working in a corporate requires certain communication tools, like Outlook or Skype for example. They are very easy to use luckily.
        Organizing and managing teams effectivly is a hard task, so different methodologies are invented for this problem.
        However, the most popular one is the agile, scrum method. It has certain terms, roles and ceremonies, so it is worth to check them quickly.
    </p>
    <h5><a asp-action="Other" asp-controller="LearningMaterials">Other</a></h5>
    <p>
        In the last category, I have collected the skills and tools, which cannot be grouped to somewhere else, but they are important and useful. The first category here
        is containers and cloud services. They are really trending in the last couple of years, with a reason, because they make deployment and software management easier and scalable. 
        Next, there are a few tools to note or create documentation. They are well-known probably, but essential in the life of a developer. Xml and json are two widely used format, 
        so it is hard to find a place, where they are not used. As a developer who works with computers, it is recommended to know the computer technology itself, like the operating system or 
        tools like command line prompt or PowerShell.
    </p>
</div>

<div>
    <h1>Guideline for this tutorial</h1>
    <p>
        The big picture shows the categories and skills to learn, but does not tell their order. Also, there is an always on-going question what is the best way to learn programming.
        So I would like to introduce my opinion on these topics.
    </p>
    <p>
        First, let's debate the question, how to learn programming. There are three main ways to learn it, universities, few months bootcamps or self-teaching from the internet.
        Since I am a self-taught programmer and even created this tutorial for this path, it should be clear, which method I prefer. However, it is not that simple and probably there is no
        general right way. So the decision can really depend on the individual. Therefore, I would like to just highlight the pros and cons for every methods, rather than give a direct answer.
    </p>
    <p>
        Here is a great video about the topic, which kinda covers my opinion as well.<br>
        <iframe src="https://www.youtube.com/embed/jAlwZe-UrDY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </p>
    <p class="fixedheight">
        <img class="studyimages" src="~/images/university.jpg" />
        Let's start with universities. They are well-known, so I won't waste too much time on them. Getting a degree from a university usually takes longer than in the other methods, 3-4 years.
        In this longer period, you will gain a more general, deeper and wider knowledge about the IT sector, but a decent part of them won't be used ever in your career.
        The universities provide a frame for learning, for example they check your knowledge from time to time with exams. This makes the universities hard and frustrating sometimes, but it forces you
        to learn. They help creating a social network for yourself and you have partners in learning, since the members of the classes are usually big. You don't need a separate
        mentor either, because there are teachers and maybe mentors on the universities.
        In financial view, universities can be costly, so if you have to take loan to study programming on a university, it might not be a good idea. In IT, the degree is not the most important thing,
        and usually the jobs don't require them, except just a few. However, the HR might overlook those candidates without degree, but this impact can be minimized.
        So universities provide prestige, they can be a natural showcase of your skills.
        There is one aspect in my opinion, which is the biggest advantage of a university. They shape your way of thinking and most mental skills will be perfected there.
        In summary, I think going to a university is not necessary, but if you don't put yourself in debt, it is not a bad decision for sure.
    </p>
    <p class="fixedheight">
        <img class="studyimages" src="~/images/bootcamp.JPG" />
        Now let's talk about the bootcamps. These are basically long-term, class-like courses. They are usually very intensive in their period, which lasts from a few months to a few years.
        They are very similar to universities, so every advantage from that section applies here as well, except they provide much less prestige.
        Bootcamps are good to build connections, you have mentors, they have the right course length and they focus on the important things, but they also try to give you wide knowledge.
        Their cost is usually less than the universities' and provide money back guarantee if you cannot find a job in a certain time range after finishing the course.
        They are kinda the smaller version of universities.
        So it seems they have no disadvantages, but the unfortunate thing that they vary very much in quality.
        In reality, there are lots of bootcamps, but only a few give you good knowledge. Usually what you learn there, it is not enough even for the junior level,
        so you have to mix this type with self-learning. I suggest this method only, if you need a frame and supervision to learn. However, even in this case, you have to spend extra time to deepen
        and extend your knowledge. So be careful to choose a bootcamp, especially if it is not free, because you might waste your money.
    </p>
    <p class="fixedheight">
        <img class="studyimages" src="~/images/self-learning.jpg" />
        The last category is self-learning. It gives you the most freedom, in terms of learning pace, learning directions and change. This is the most cheapest option, but it is not completely free,
        because there are certain topics, where the free materials are not good enough. Luckily, there are lots of relatively cheap courses on Udemy or Pluralsight for example.
        This method requires altough the most discipline. You need a big commitment and goal oriented mind to walk this path. Also without a mentor, it is really hard,
        since you have no help and guidence.
        Therefore, this way is not suited for everyone, but if you can learn by this process, you will profit the most. Also worth noting, that sooner or later in a programming career,
        everybody will have to learn from the internet, from the documentations, because the courses, tutorials usually cover only the general, main materials.
    </p>
    <p>
        Now about the order of the topics. I will just simply name the order here without detailed explanation. So check the materials on this website in this order. I grouped the sections
        into modules.
    </p>
    <h5>Module 0: Background knowledge</h5>
    <ul>
        <li>Soft skills: english, problem solving</li>
        <li>Other: OS</li>
    </ul>
    <h5>Module 1: Basics</h5>
    <ul>
        <li>Coding: language basics</li>
        <li>SQL: basic queries, database desing</li>
        <li>Web: html, css, javascript</li>
        <li>Soft skills: version control</li>
        <li>Other: Excel, Word, Notepad++, cmd, Powershell</li>
    </ul>
    <h5>Module 2: Deepen the knowledge</h5>
    <ul>
        <li>Coding: advanced language, common libraries</li>
        <li>SQL: advanced queries</li>
        <li>Web: frontend frameworks</li>
        <li>Design: SOLID</li>
        <li>Other: json, xml</li>
        <li>Programming: using an IDE, algorithm, data structures</li>
    </ul>
    <h5>Module 3: Creating projects</h5>
    <ul>
        <li>Design: dependency injection, project architectures</li>
        <li>Coding: project types</li>
        <li>Soft skills: corporate communication, methodologies</li>
    </ul>
    <h5>Module 4: Advanced topics</h5>
    <ul>
        <li>Programming: best practices</li>
        <li>Design: design patterns</li>
        <li>Web: networking</li>
        <li>SQL: advanced database, analyzing, maintenance</li>
        <li>Other: Azure, Docker, Kubernetes</li>
    </ul>
</div>

<div>
    <h1>
        Tips
    </h1>
    <p>
        Finally, I would like to mention a few tips, which could have been useful, when I started programming.
    </p>
    <ul>
        <li>
            You have to love this proffession as a hobby, or you won't be successfull. The technology is constantly changing. Your whole career is going to be a never ending learning.
        </li>
        <li>
            Practice, repeat what you learnt and do your own projects. You can learn much more from creating own projects and coup with the occuring problems there.
        </li>
        <li>
            Don't memorize everything, just the realtionship and the logic between the information. Everything else can be found quickly on the internet.
        </li>
        <li>
            Get familiar and experienced with searching solution for your problems on the internet. Stackoverflow is your friend.
        </li>
        <li>
            If it is possible, find a mentor. Most likely you will have problems in the learning process, and could be devastating, frustrating to spend days with one single problem.
            You need somebody to ask your questions.
        </li>
        <li>
            Have lots of contacts on linkedin or be active on Twitter on developer pages or have a website to showcase your skills.
        </li>
        <li>
            Put effort in best practises, conventions of the language. This can be a game changer.
        </li>
        <li>
            Be patient. It takes time to learn and practice everything.
        </li>
        <li>
            If you start with a language, which does not fit for you, you can always change it. Learning a second language is much easier.
        </li>
    </ul>
</div>